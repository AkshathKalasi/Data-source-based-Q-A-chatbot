# ====================================================================
# TIME TRAVEL & SESSION TREE CLI TEST COMMANDS
# ====================================================================

# PREREQUISITE: Navigate to project directory
cd d:\chatbot_web\chatbot_project

# ====================================================================
# FEATURE 1: TIME TRAVEL EXECUTION TESTS
# ====================================================================

# Test Case 1: Basic Pipeline Execution
python manage.py timetravel execute --message "What is JavaScript?" --thread-id "tt_test_001" --context "JavaScript programming language"

# Test Case 2: View Execution History
python manage.py timetravel history --thread-id "tt_test_001"

# Test Case 3: Re-run Specific Nodes
python manage.py timetravel rerun --thread-id "tt_test_001" --nodes "generate" --message "What is JavaScript used for?"
## can run retrieve, context, confidence , sentiment , generate nodes.

# Rerun just the generate node
python manage.py timetravel rerun --thread-id "tt_test_001" --nodes "generate" --message "What is JavaScript used for?"

# Rerun multiple nodes (comma-separated)
python manage.py timetravel rerun --thread-id "tt_test_001" --nodes "retrieve,generate" --message "Updated question"

# Rerun sentiment analysis
python manage.py timetravel rerun --thread-id "tt_test_001" --nodes "sentiment" --message "New message"

# Rerun confidence calculation
python manage.py timetravel rerun --thread-id "tt_test_001" --nodes "confidence" --message "Recalculate confidence"


# Test Case 4: Ambiguity Detection (HITL)
python manage.py timetravel execute --message "What is Apple?" --thread-id "tt_test_002"

# Test Case 5: Ambiguity with Context
python manage.py timetravel execute --message "What is Apple?" --thread-id "tt_test_002b" --context "Apple Inc. technology company"

# Test Case 6: Multiple Executions Same Thread
python manage.py timetravel execute --message "Explain Python loops" --thread-id "tt_test_003" --context "Python programming"
python manage.py timetravel execute --message "Python data types" --thread-id "tt_test_003" --context "Python programming"
python manage.py timetravel history --thread-id "tt_test_003"

# Test Case 7: Different Programming Languages
python manage.py timetravel execute --message "What is Java?" --thread-id "tt_test_004" --context "Java programming language"
python manage.py timetravel execute --message "What is C++?" --thread-id "tt_test_005" --context "C++ programming language"
python manage.py timetravel execute --message "What is React?" --thread-id "tt_test_006" --context "React JavaScript library"

# Test Case 8: Cache Effectiveness Test
python manage.py timetravel execute --message "What is Docker?" --thread-id "cache_test" --context "Docker containerization"
python manage.py timetravel execute --message "What is Docker?" --thread-id "cache_test" --context "Docker containerization"
python manage.py timetravel history --thread-id "cache_test"

# Test Case 9: Complex Technical Queries
python manage.py timetravel execute --message "Explain machine learning algorithms" --thread-id "ml_thread" --context "machine learning technology"
python manage.py timetravel execute --message "What is neural network?" --thread-id "ml_thread" --context "machine learning technology"
python manage.py timetravel history --thread-id "ml_thread"

# Test Case 10: Rewind Functionality (if checkpoint available)
python manage.py timetravel rewind --thread-id "tt_test_001" --checkpoint "checkpoint_id_from_history"

# ====================================================================
# FEATURE 2: SESSION TREE MANAGEMENT TESTS
# ====================================================================

# Test Case 11: View Session Tree for Thread
python manage.py sessiontree tree --thread-id "tt_test_001"
python manage.py sessiontree tree --thread-id "tt_test_003"
python manage.py sessiontree tree --thread-id "ml_thread"


# // There is a issue that it does not show the parent id and node id. NEED tO BE FIXED.
# Test Case 12: Create Branch (replace node_id with actual ID from tree output)
python manage.py sessiontree branch --parent-id "node_id_from_tree_output" --message "What is TypeScript?"

# Test Case 13: Explore Django Session (replace with actual session UUID from web UI)
python manage.py sessiontree explore --session-id "your_django_session_uuid_here"

# Test Case 14: Multiple Tree Views
python manage.py sessiontree tree --thread-id "tt_test_004"
python manage.py sessiontree tree --thread-id "tt_test_005"
python manage.py sessiontree tree --thread-id "tt_test_006"

# ====================================================================
# ERROR HANDLING & EDGE CASE TESTS
# ====================================================================

# Test Case 15: Missing Parameters
python manage.py timetravel execute
python manage.py timetravel history
python manage.py sessiontree tree

# Test Case 16: Invalid Thread/Session IDs
python manage.py timetravel history --thread-id "nonexistent_thread"
python manage.py sessiontree tree --thread-id "invalid_thread_id"
python manage.py sessiontree explore --session-id "invalid-uuid-format"

# Test Case 17: Empty Results
python manage.py timetravel history --thread-id "never_used_thread"
python manage.py sessiontree tree --thread-id "empty_thread"

# ====================================================================
# PERFORMANCE & STRESS TESTS
# ====================================================================

# Test Case 18: Large Thread History
python manage.py timetravel execute --message "Question 1 about programming" --thread-id "large_thread" --context "programming"
python manage.py timetravel execute --message "Question 2 about databases" --thread-id "large_thread" --context "database technology"
python manage.py timetravel execute --message "Question 3 about web development" --thread-id "large_thread" --context "web development"
python manage.py timetravel execute --message "Question 4 about cloud computing" --thread-id "large_thread" --context "cloud technology"
python manage.py timetravel execute --message "Question 5 about cybersecurity" --thread-id "large_thread" --context "cybersecurity"
python manage.py timetravel history --thread-id "large_thread"
python manage.py sessiontree tree --thread-id "large_thread"

# Test Case 19: Rapid Sequential Executions
python manage.py timetravel execute --message "What is HTML?" --thread-id "rapid_test" --context "HTML markup language"
python manage.py timetravel execute --message "What is CSS?" --thread-id "rapid_test" --context "CSS styling language"
python manage.py timetravel execute --message "What is Bootstrap?" --thread-id "rapid_test" --context "Bootstrap CSS framework"
python manage.py timetravel history --thread-id "rapid_test"

# ====================================================================
# COMPREHENSIVE WORKFLOW TESTS
# ====================================================================

# Test Case 20: Complete Workflow
python manage.py timetravel execute --message "Explain REST API" --thread-id "workflow_test" --context "REST API web development"
python manage.py sessiontree tree --thread-id "workflow_test"
python manage.py timetravel history --thread-id "workflow_test"
python manage.py timetravel rerun --thread-id "workflow_test" --nodes "generate" --message "REST API best practices"
python manage.py timetravel history --thread-id "workflow_test"
python manage.py sessiontree tree --thread-id "workflow_test"

# Test Case 21: Cross-Thread Analysis
python manage.py timetravel execute --message "What is MongoDB?" --thread-id "db_thread_1" --context "MongoDB database"
python manage.py timetravel execute --message "What is PostgreSQL?" --thread-id "db_thread_2" --context "PostgreSQL database"
python manage.py timetravel execute --message "What is Redis?" --thread-id "db_thread_3" --context "Redis database"
python manage.py timetravel history --thread-id "db_thread_1"
python manage.py timetravel history --thread-id "db_thread_2"
python manage.py timetravel history --thread-id "db_thread_3"

# ====================================================================
# VALIDATION TESTS
# ====================================================================

# Test Case 22: Verify Time Travel Features
python manage.py timetravel execute --message "What is Kubernetes?" --thread-id "validation_test" --context "Kubernetes container orchestration"
python manage.py timetravel history --thread-id "validation_test"
python manage.py sessiontree tree --thread-id "validation_test"

# Test Case 23: Verify Session Tree Features
python manage.py timetravel execute --message "What is DevOps?" --thread-id "devops_thread" --context "DevOps methodology"
python manage.py sessiontree tree --thread-id "devops_thread"

# ====================================================================
# FINAL VERIFICATION COMMANDS
# ====================================================================

# List all created threads (manual verification)
echo "=== CREATED THREADS FOR TESTING ==="
echo "tt_test_001, tt_test_002, tt_test_002b, tt_test_003, tt_test_004"
echo "tt_test_005, tt_test_006, cache_test, ml_thread, large_thread"
echo "rapid_test, workflow_test, db_thread_1, db_thread_2, db_thread_3"
echo "validation_test, devops_thread"

# Quick verification of key threads
python manage.py timetravel history --thread-id "tt_test_001"
python manage.py sessiontree tree --thread-id "tt_test_001"
python manage.py timetravel history --thread-id "large_thread"
python manage.py sessiontree tree --thread-id "large_thread"

# ====================================================================
# NOTES FOR TESTING
# ====================================================================
# 1. Run commands sequentially for best results
# 2. Replace "node_id_from_tree_output" with actual node IDs from tree command outputs
# 3. Replace "your_django_session_uuid_here" with actual session UUID from web interface
# 4. Each execution takes ~15-20 seconds due to vector database loading
# 5. Monitor execution logs for timing information
# 6. Check for cached vs executed nodes in history output
# 7. Verify session tree stores question/response pairs correctly
# 8. Test error handling with invalid parameters
# ====================================================================
